{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Domain Driven Design Caso de negocio Sistema de reservas de habitaciones de hotel: Como cliente, quiero poder buscar y reservar habitaciones de hotel disponibles para las fechas de mi viaje y filtrar los resultados por tipo de habitaci\u00f3n o precio. Dominios Actividad para la identificaci\u00f3n de dominios: Event storming Para el desarrollo de esta actividad se tuvieron en cuenta: Dominios Comandos Roles Reglas de negocio Agregados Issues Sistemas externos Y finalmente se definieron los dominios como se muestra a continuaci\u00f3n: Cliente Habitaci\u00f3n Reserva Registro e informaci\u00f3n del cliente Informaci\u00f3n por tipos y precios Busqueda de habitaciones Reservas del cliente Disponibilidad de habitaciones Reserva y cancelaci\u00f3n MVP sequenceDiagram participant Cliente participant Reserva participant Habitaci\u00f3n Cliente ->> Reserva: Solicitud de reserva Reserva ->> Habitaci\u00f3n: Disponibilidad y precio Habitaci\u00f3n -->> Reserva: Respuesta de disponibilidad Reserva -->> Cliente: Respuesta de reserva para fechas de viaje Nota: Para cada uno de los microservicios se creo un repositorio estructurado de c\u00f3digo en donde se encontrar\u00e1n las entidades, el controlador, los repositorios, las pruebas unitarias y dem\u00e1s clases o configuraciones necesarias para compilar el proyecto.","title":"Domain Driven Design"},{"location":"#domain-driven-design","text":"","title":"Domain Driven Design"},{"location":"#caso-de-negocio","text":"Sistema de reservas de habitaciones de hotel: Como cliente, quiero poder buscar y reservar habitaciones de hotel disponibles para las fechas de mi viaje y filtrar los resultados por tipo de habitaci\u00f3n o precio.","title":"Caso de negocio"},{"location":"#dominios","text":"Actividad para la identificaci\u00f3n de dominios: Event storming Para el desarrollo de esta actividad se tuvieron en cuenta: Dominios Comandos Roles Reglas de negocio Agregados Issues Sistemas externos Y finalmente se definieron los dominios como se muestra a continuaci\u00f3n: Cliente Habitaci\u00f3n Reserva Registro e informaci\u00f3n del cliente Informaci\u00f3n por tipos y precios Busqueda de habitaciones Reservas del cliente Disponibilidad de habitaciones Reserva y cancelaci\u00f3n","title":"Dominios"},{"location":"#mvp","text":"sequenceDiagram participant Cliente participant Reserva participant Habitaci\u00f3n Cliente ->> Reserva: Solicitud de reserva Reserva ->> Habitaci\u00f3n: Disponibilidad y precio Habitaci\u00f3n -->> Reserva: Respuesta de disponibilidad Reserva -->> Cliente: Respuesta de reserva para fechas de viaje Nota: Para cada uno de los microservicios se creo un repositorio estructurado de c\u00f3digo en donde se encontrar\u00e1n las entidades, el controlador, los repositorios, las pruebas unitarias y dem\u00e1s clases o configuraciones necesarias para compilar el proyecto.","title":"MVP"},{"location":"arquitectures/","text":"Clean Arquitectures Patrones utilizados En el desarrollo de los microservicios de cliente, reserva y habitaci\u00f3n, se implementaron diversos patrones de dise\u00f1o que optimizan la estructura y el comportamiento de estas aplicaciones. Los patrones utilizados fueron: 1. Patrones de creaci\u00f3n \u2022 Factory Method: Facilita la creaci\u00f3n de objetos de manera flexible y eficiente. \u2022 Transfer Object: Permite el intercambio de datos de forma simplificada entre componentes del sistema. 2. Patrones de estructura \u2022 Patr\u00f3n Repository: Centraliza el acceso y manipulaci\u00f3n de datos, mejorando la organizaci\u00f3n y mantenibilidad del c\u00f3digo. 3. Patrones de comportamiento \u2022 Patr\u00f3n Strategy: Permite definir algoritmos intercambiables para resolver una tarea espec\u00edfica, brindando mayor flexibilidad y extensibilidad a la aplicaci\u00f3n. 4. Patrones de arquitectura \u2022 Arquitectura Hexagonal: Se realiz\u00f3 una separaci\u00f3n por capas que permiti\u00f3 una mejor organizaci\u00f3n del c\u00f3digo y una mayor facilidad para realizar cambios y mejoras en cada componente de forma aislada, sin afectar otras partes del sistema. \u2022 Microservicios: Enfoque arquitect\u00f3nico principal, que divide la aplicaci\u00f3n en componentes independientes y desacoplados, facilitando su escalabilidad y mantenimiento. \u2022 Cliente-Servidor: Gestiona las interacciones entre los usuarios y los servicios. \u2022 Patr\u00f3n MVC: Organiza la estructura de la aplicaci\u00f3n en modelos, vistas y controladores, mejorando la separaci\u00f3n de responsabilidades y la legibilidad del c\u00f3digo. Patrones futuros En busca de mejorar nuestra aplicaci\u00f3n, se tuvieron en cuenta algunos patrones que pueden contribuir significativamente en la arquitectura, el rendimiento y la gesti\u00f3n del sistema a medida que avanza en su desarrollo. Llegando as\u00ed a patrones que nos proporcionen una mayor eficiencia, mantenibilidad e infraestructura m\u00e1s s\u00f3lida y adaptable. \u2022 Patr\u00f3n CQRS (Command Query Responsibility Segregation): Es una opci\u00f3n que se considera para el microservicio de Reserva. Este patr\u00f3n propone tener dos bases de datos: una para lectura y otra para escritura. Esto permite optimizar el rendimiento al tener una base de datos optimizada para las operaciones de consulta y otra para las operaciones de escritura evitando posibles cuellos de botella en las operaciones. \u2022 Patr\u00f3n de API Gateway: Establece un punto de entrada \u00fanico para comunicar los microservicios de cliente, reserva y habitaci\u00f3n. Al usar un API Gateway, podemos centralizar y gestionar de manera m\u00e1s eficiente las solicitudes que llegan a nuestros microservicios, lo que facilita el control de acceso, la seguridad y el monitoreo de las comunicaciones entre los diferentes componentes de la aplicaci\u00f3n.","title":"Clean Arquitectures"},{"location":"arquitectures/#clean-arquitectures","text":"","title":"Clean Arquitectures"},{"location":"arquitectures/#patrones-utilizados","text":"En el desarrollo de los microservicios de cliente, reserva y habitaci\u00f3n, se implementaron diversos patrones de dise\u00f1o que optimizan la estructura y el comportamiento de estas aplicaciones. Los patrones utilizados fueron: 1. Patrones de creaci\u00f3n \u2022 Factory Method: Facilita la creaci\u00f3n de objetos de manera flexible y eficiente. \u2022 Transfer Object: Permite el intercambio de datos de forma simplificada entre componentes del sistema. 2. Patrones de estructura \u2022 Patr\u00f3n Repository: Centraliza el acceso y manipulaci\u00f3n de datos, mejorando la organizaci\u00f3n y mantenibilidad del c\u00f3digo. 3. Patrones de comportamiento \u2022 Patr\u00f3n Strategy: Permite definir algoritmos intercambiables para resolver una tarea espec\u00edfica, brindando mayor flexibilidad y extensibilidad a la aplicaci\u00f3n. 4. Patrones de arquitectura \u2022 Arquitectura Hexagonal: Se realiz\u00f3 una separaci\u00f3n por capas que permiti\u00f3 una mejor organizaci\u00f3n del c\u00f3digo y una mayor facilidad para realizar cambios y mejoras en cada componente de forma aislada, sin afectar otras partes del sistema. \u2022 Microservicios: Enfoque arquitect\u00f3nico principal, que divide la aplicaci\u00f3n en componentes independientes y desacoplados, facilitando su escalabilidad y mantenimiento. \u2022 Cliente-Servidor: Gestiona las interacciones entre los usuarios y los servicios. \u2022 Patr\u00f3n MVC: Organiza la estructura de la aplicaci\u00f3n en modelos, vistas y controladores, mejorando la separaci\u00f3n de responsabilidades y la legibilidad del c\u00f3digo.","title":"Patrones utilizados"},{"location":"arquitectures/#patrones-futuros","text":"En busca de mejorar nuestra aplicaci\u00f3n, se tuvieron en cuenta algunos patrones que pueden contribuir significativamente en la arquitectura, el rendimiento y la gesti\u00f3n del sistema a medida que avanza en su desarrollo. Llegando as\u00ed a patrones que nos proporcionen una mayor eficiencia, mantenibilidad e infraestructura m\u00e1s s\u00f3lida y adaptable. \u2022 Patr\u00f3n CQRS (Command Query Responsibility Segregation): Es una opci\u00f3n que se considera para el microservicio de Reserva. Este patr\u00f3n propone tener dos bases de datos: una para lectura y otra para escritura. Esto permite optimizar el rendimiento al tener una base de datos optimizada para las operaciones de consulta y otra para las operaciones de escritura evitando posibles cuellos de botella en las operaciones. \u2022 Patr\u00f3n de API Gateway: Establece un punto de entrada \u00fanico para comunicar los microservicios de cliente, reserva y habitaci\u00f3n. Al usar un API Gateway, podemos centralizar y gestionar de manera m\u00e1s eficiente las solicitudes que llegan a nuestros microservicios, lo que facilita el control de acceso, la seguridad y el monitoreo de las comunicaciones entre los diferentes componentes de la aplicaci\u00f3n.","title":"Patrones futuros"},{"location":"devops/","text":"DevOps Repositorio de c\u00f3digo El c\u00f3digo fuente del proyecto se encuentra en tres repositorios dentro de la organizaci\u00f3n RoomFinder-ARCN en GitHub, en donde se trabajaron los microservicios de cliente, reserva y habitaci\u00f3n. Codespace Se creo un entorno de desarrollo basado en la nube directamente desde los repositorios de GitHub, en donde se puede codificar, compilar, depurar y colaborar directamente desde un navegador web, eliminando la necesidad de configurar manualmente los entornos de desarrollo en las m\u00e1quinas locales. Para la creaci\u00f3n de los codespace, cada uno de los respositorios de la organizaci\u00f3n del proyecto cuenta con un archivo devcontainer.json que permite definir y configurar el entorno de desarrollo, la imagen del contenedor, las extensiones, herramientas y dependencias necesarias para su adecuada compilaci\u00f3n. Configuraci\u00f3n devcontainer.json devcontainer.json # Archivo de configuraci\u00f3n \"name\": ... \"features\": ... \"extensions\": ... ... An\u00e1lisis est\u00e1tico de c\u00f3digo Con ayuda de SonarCloud se logr\u00f3 la integraci\u00f3n continua y el an\u00e1lisis est\u00e1tico de c\u00f3digo en donde se obtuvieron m\u00e9tricas de calidad, estad\u00edsticas, porcentajes de cobertura del c\u00f3digo, entre otros, para realizar correcciones de manera temprana y entregar un software m\u00e1s seguro, consistente y mantenible.","title":"DevOps"},{"location":"devops/#devops","text":"","title":"DevOps"},{"location":"devops/#repositorio-de-codigo","text":"El c\u00f3digo fuente del proyecto se encuentra en tres repositorios dentro de la organizaci\u00f3n RoomFinder-ARCN en GitHub, en donde se trabajaron los microservicios de cliente, reserva y habitaci\u00f3n.","title":"Repositorio de c\u00f3digo"},{"location":"devops/#codespace","text":"Se creo un entorno de desarrollo basado en la nube directamente desde los repositorios de GitHub, en donde se puede codificar, compilar, depurar y colaborar directamente desde un navegador web, eliminando la necesidad de configurar manualmente los entornos de desarrollo en las m\u00e1quinas locales. Para la creaci\u00f3n de los codespace, cada uno de los respositorios de la organizaci\u00f3n del proyecto cuenta con un archivo devcontainer.json que permite definir y configurar el entorno de desarrollo, la imagen del contenedor, las extensiones, herramientas y dependencias necesarias para su adecuada compilaci\u00f3n. Configuraci\u00f3n devcontainer.json devcontainer.json # Archivo de configuraci\u00f3n \"name\": ... \"features\": ... \"extensions\": ... ...","title":"Codespace"},{"location":"devops/#analisis-estatico-de-codigo","text":"Con ayuda de SonarCloud se logr\u00f3 la integraci\u00f3n continua y el an\u00e1lisis est\u00e1tico de c\u00f3digo en donde se obtuvieron m\u00e9tricas de calidad, estad\u00edsticas, porcentajes de cobertura del c\u00f3digo, entre otros, para realizar correcciones de manera temprana y entregar un software m\u00e1s seguro, consistente y mantenible.","title":"An\u00e1lisis est\u00e1tico de c\u00f3digo"}]}